# generated by datamodel-codegen:
#   filename:  run-results_v1.json

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any
from typing import Optional
from typing import Union

from pydantic import ConfigDict

from vendor.dbt_artifacts_parser.parsers.base import BaseParserModel


class BaseArtifactMetadata(BaseParserModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    dbt_schema_version: str
    dbt_version: Optional[str] = "0.19.0"
    generated_at: Optional[datetime] = "2021-02-10T04:42:33.678063Z"
    invocation_id: Optional[str] = None
    env: Optional[dict[str, str]] = {}


class Status(Enum):
    success = "success"
    error = "error"
    skipped = "skipped"


class Status1(Enum):
    pass_ = "pass"
    error = "error"
    fail = "fail"
    warn = "warn"


class Status2(Enum):
    pass_ = "pass"
    warn = "warn"
    error = "error"
    runtime_error = "runtime error"


class TimingInfo(BaseParserModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None


class RunResultOutput(BaseParserModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    status: Union[Status, Status1, Status2]
    timing: list[TimingInfo]
    thread_id: str
    execution_time: float
    message: Optional[Union[str, int]] = None
    adapter_response: dict[str, Any]
    unique_id: str


class RunResultsV1(BaseParserModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    metadata: BaseArtifactMetadata
    results: list[RunResultOutput]
    elapsed_time: float
    args: Optional[dict[str, Any]] = {}
